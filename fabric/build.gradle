plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

version = mod_version
group = maven_group


dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.2:${parchment_date}@zip")
    })
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    compileOnly project(":Common")
    compileOnly(annotationProcessor('com.google.auto.service:auto-service:1.1.1'))
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    //accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
}

def properties = [
    minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
    loader_version: fabric_loader_version,
    mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
    mod_author: mod_author, mod_description: mod_description
]

processResources {
    from project(":Common").sourceSets.main.resources
    for (final def property in properties) {
        inputs.property(property.getKey(), property.getValue())
    }

    filesMatching("fabric.mod.json") {
        expand(properties)
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId "${archives_name}-${project.name.toLowerCase()}"
            version "${minecraft_version}-${version}"
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
